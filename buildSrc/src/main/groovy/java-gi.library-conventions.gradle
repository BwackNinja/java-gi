import org.apache.tools.ant.taskdefs.condition.Os
import io.github.jwharm.javagi.GenerateSources

/* Common build settings for Java-GI modules:
 * 
 * - Load java-library and maven-publish plugins
 * - Set maven repositories
 * - Load common dependencies
 * - Set group and Java-GI version number
 * - Set JDK version
 * - Configure 'generateSources' action
 * - Enable preview features
 * - Set OS-specific library paths for unit tests
 * - Set common POM metadata and enable signing
 */

plugins {
    id 'java-library'
    id 'maven-publish'
    id 'signing'
}

repositories {
    mavenCentral()
}

dependencies {
    compileOnly 'org.jetbrains:annotations:24.+'
    testImplementation 'org.junit.jupiter:junit-jupiter:5.9.2'
    testRuntimeOnly 'org.junit.platform:junit-platform-launcher'
}

group = 'io.github.jwharm.javagi'
version = '0.7.1'

java {
    if (! System.getenv('CI')) {
        withJavadocJar()
    }
    withSourcesJar()
    toolchain {
        languageVersion = JavaLanguageVersion.of(20)
    }
}

tasks.register('generateSources', GenerateSources) {
    // Input directory should point to a clone of the GitHub gircore/gir-files
    // repository. The location is set in gradle.properties. Default is '../gir-files'
    inputDirectory = project.rootDir.toPath().resolve(girFilesLocation).toFile()

    // Write generated sources to build/generated/sources/java-gi
    outputDirectory = layout.buildDirectory.get().dir('generated').dir('sources').dir('java-gi').asFile
}

// Add the generated sources to the main sourceSet
sourceSets.main.java.srcDirs += ['build/generated/sources/java-gi']

tasks.named('compileJava') {
    dependsOn generateSources
    options.compilerArgs += '--enable-preview'
    options.encoding = 'UTF-8'
}

tasks.named('javadoc') {
    if (System.getenv('CI')) {
        enabled = false
    }
    options.addStringOption('source', '20')
    options.addBooleanOption('-enable-preview', true)
    options.addStringOption('Xdoclint:none', '-quiet')
    options.encoding = 'UTF-8'
}

tasks.named('sourcesJar') {
    dependsOn generateSources
}

tasks.named('compileTestJava') {
    options.compilerArgs += '--enable-preview'
    options.encoding = 'UTF-8'
}

tasks.named('test') {
    // Don't run tests in Github action. The native libraries aren't installed.
    if (System.getenv('CI')) {
        enabled = false
    }

    // Configure library path for MacOS (Homebrew) and set MacOS-specific JVM parameter
    if (Os.isFamily(Os.FAMILY_MAC)) {
        jvmArgs += '-Djava.library.path=/opt/homebrew/lib'
        jvmArgs += '-XstartOnFirstThread'
    }

    // Configure library path for Arch, Fedora and Debian/Ubuntu
    else if (Os.isFamily(Os.FAMILY_UNIX)) {
        jvmArgs += '-Djava.library.path=/usr/lib64:/lib64:/lib:/usr/lib:/lib/x86_64-linux-gnu'
    }

    // Configure library path for Windows (MSYS2)
    else if (Os.isFamily(Os.FAMILY_WINDOWS)) {
        jvmArgs += '-Djava.library.path=C:/msys64/mingw64/bin'
    }

    useJUnitPlatform()
    jvmArgs += '--enable-preview'
    jvmArgs += '--enable-native-access=ALL-UNNAMED'
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            from components.java
            pom {
                name = "${groupId}:${artifactId}"
                groupId = 'io.github.jwharm.javagi'
                description = "Java language bindings for ${artifactId.capitalize()}, generated with Java-GI"
                url = 'https://jwharm.github.io/java-gi/'
                licenses {
                    license {
                        name = 'GNU Lesser General Public License, version 2.1'
                        url = 'https://www.gnu.org/licenses/lgpl-2.1.txt'
                    }
                }
                developers {
                    developer {
                        id = 'jwharm'
                        name = 'Jan-Willem Harmannij'
                        email = 'jwharmannij@gmail.com'
                        url = 'https://github.com/jwharm'
                    }
                }
                scm {
                    connection = 'scm:git:git://github.com/jwharm/java-gi.git'
                    developerConnection = 'scm:git:ssh://github.com:jwharm/java-gi.git'
                    url = 'http://github.com/jwharm/java-gi/tree/master'
                }
            }
        }
    }

    if (project.hasProperty('ossrhUsername') && project.hasProperty('ossrhPassword')) {
        repositories {
            maven {
                name = 'OSSRH'
                def releasesRepoUrl = 'https://s01.oss.sonatype.org/service/local/staging/deploy/maven2/'
                def snapshotsRepoUrl = 'https://s01.oss.sonatype.org/content/repositories/snapshots/'
                url = version.endsWith('SNAPSHOT') ? snapshotsRepoUrl : releasesRepoUrl
                credentials {
                    username = ossrhUsername
                    password = ossrhPassword
                }
            }
        }
        signing {
            sign publishing.publications.mavenJava
        }
    }
}
