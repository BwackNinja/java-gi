import io.github.jwharm.javagi.operations.GenerateSourcesOperation;
import io.github.jwharm.javagi.patches.*;

plugins {
    id 'java-gi.library-conventions'
}

version = "2.76-${version}"

tasks.named('generateSources') {
    def MODULE_INFO = """
        module org.gnome.glib {
            requires static org.jetbrains.annotations;
            exports io.github.jwharm.javagi;
            exports io.github.jwharm.javagi.annotations;
            exports io.github.jwharm.javagi.base;
            exports io.github.jwharm.javagi.interop;
            exports io.github.jwharm.javagi.types;
            exports io.github.jwharm.javagi.util;
            %s
        }
        """
    
    new GenerateSourcesOperation()
        .sourceDirectory(new File(girFilesLocation).toPath())
        .outputDirectory(buildDir.toPath().resolve('generated').resolve('sources').resolve('java-gi'))
        .source('GLib-2.0.gir', 'https://docs.gtk.org/glib/', new GLibPatch())
        .source('GObject-2.0.gir', 'https://docs.gtk.org/gobject/', new GObjectPatch())
        .source('Gio-2.0.gir', 'https://docs.gtk.org/gio/', new GioPatch())
        .source('GModule-2.0.gir', null, null)
        .moduleInfo(MODULE_INFO)
        .execute()
}

tasks.named('compileJava') {
    dependsOn generateSources
}

publishing {
    publications {
        maven(MavenPublication) {
            artifactId = name
            version = version
        }
    }
}
